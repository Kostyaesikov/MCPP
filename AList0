# MCPP
training mcpp
package edu.mcpp.Alist;

import java.util.ArrayList;

public class AList0 implements ExList
{
	int[] ar = new int[0];

	@Override
	public int size() 
	{
		if (ar == null)
		{
			return 0;
		}
		return ar.length;
	}

	@Override
	public void clear() 
	{
		int[] tmp = new int[0];
		ar = tmp;	
	}

	@Override
	public int[] toArray() 
	{
		int [] Arr = new int [ar.length];
		for (int i = 0 ; i < ar.length; i++)
		{
			Arr[i] = ar[i];
		}
		return Arr;
	}

	@Override
	public void init(int[] mas)
	{
		ar = mas;
	}

	@Override
	public void addEnd(int val) 
	{
		int[] tmp = new int[ar.length + 1];
		for (int i = 0; i < ar.length; i++)
		{
			tmp[i] = ar[i];
		}
		tmp[ar.length] = val;
		ar = tmp;
	}

	@Override
	public void addStart(int val) 
	{
		int[] tmp = new int[ar.length + 1];
		for (int i = 0; i < ar.length; i++)
		{
			tmp[i + 1] = ar[i];
		}
		tmp[0] = val;
		ar = tmp;	
	}

	@Override
	public void addPos(int pos, int val)
	{
		if ( pos < 0 || pos >ar.length)
			throw new IllegalArgumentException();

		int[] tmp = new int[ar.length + 1];
		for (int i = 0; i < ar.length; i++)
		{
			if (i < pos)
			{
				tmp[i] = ar[i];
			}
			else
			{
				tmp[i + 1] = ar[i];
			}

		}
		tmp[pos] = val;
		ar = tmp;		
	}

	@Override
	public int delEnd() 
	{
		if ( ar.length == 0)
			throw new IllegalArgumentException();

		int res = ar[ar.length - 1];
		int[] tmp = new int[ar.length - 1];
		for (int i = 0; i < ar.length - 1; i++)
		{
			tmp[i] = ar[i];
		}
		ar = tmp;		
		return res;
	}

	@Override
	public int delStart() 
	{
		if ( ar.length == 0)
			throw new IllegalArgumentException();

		int res = ar[0];		
		int[] tmp = new int[ar.length - 1];
		for (int i = 0; i < ar.length - 1; i++)
		{
			tmp[i] = ar[i+1];
		}
		ar = tmp;	
		return res;
	}

	@Override
	public int delPos(int pos) 
	{
		if ( ar.length == 0)
			throw new IllegalArgumentException();

		int res = ar[pos];
		int[] tmp = new int[ar.length - 1];
		for (int i = 0; i < ar.length - 1; i++)
		{
			if (i < pos)
			{
				tmp[i] = ar[i];
			}
			else
			{
				tmp[i] = ar[i+1];
			}

		}
		ar = tmp;	
		return res;
	}

	@Override
	public int max() 
	{
		if ( ar.length == 0)
			throw new IllegalArgumentException();

		int max = ar[0]; 
		for (int i = 0; i < ar.length; i++)
		{
			if ( max < ar[i] )
			{
				max = ar[i];
			}
		}
		return max;
	}

	@Override
	public int min() 
	{
		if ( ar.length == 0)
			throw new IllegalArgumentException();

		int min = ar[0]; 
		for (int i = 0; i < ar.length; i++)
		{
			if ( min > ar[i] )
			{
				min = ar[i];
			}
		}
		return min;
	}

	@Override
	public int maxIndex() 
	{
		if ( ar.length == 0)
			throw new IllegalArgumentException();

		int max = 0; 
		for (int i = 0; i < ar.length; i++)
		{
			if ( ar[max] < ar[i] )
			{
				max = i;
			}
		}
		return max;
	}

	@Override
	public int minIndex() 
	{
		if ( ar.length == 0)
			throw new IllegalArgumentException();

		int min = 0; 
		for (int i = 0; i < ar.length; i++)
		{
			if ( ar[min] > ar[i] )
			{
				min = i ;
			}
		}
		return min;
	}

	@Override
	public void sort() 
	{
		for(int i = ar.length-1 ; i > 0 ; i--)
		{
			for(int j = 0 ; j < i ; j++)
			{
				if( ar[j] > ar[j+1] )
				{
					int tmp = ar[j];
					ar[j] = ar[j+1];
					ar[j+1] = tmp;
				}
			}
		}
	}

	@Override
	public void reverse() 
	{
		int b = 0;
		for (int i = 0; i < ar.length/2; i++)
		{
			b = ar[i];
			ar[i] = ar[ar.length -1 -i];
			ar[ar.length -1 -i] = b;
		}
	}

	@Override
	public void halfReverse() 
	{
		int b = 0;
		if (ar.length%2 == 0)
		{
			for (int i = 0; i < ar.length/2; i++)
			{
				b = ar[i];
				ar[i] = ar[ar.length/2 + i];
				ar[ar.length/2 + i] = b;
			}
		}
		else 
		{
			for (int i = 0; i < ar.length/2; i++)
			{
				b = ar[i];
				ar[i] = ar[ar.length/2 + i +1];
				ar[ar.length/2 + i + 1] = b;
			}
		}
	}

	@Override
	public void set (int pos, int val) 
	{
		if (pos < 0 || pos >= ar.length)
			throw new ArrayIndexOutOfBoundsException();

		ar[pos] = val;
	}

	@Override
	public int get(int pos)
	{
		if ( pos < 0 || pos >=ar.length)
			throw new IllegalArgumentException();

		return ar[pos];
	}
}
